syntax = "proto3";

package todo;

// Définition du service
service TodoService {
  rpc AddTask (Task) returns (AddTaskResponse);
  rpc GetTasks (Empty) returns (TaskList);
  rpc GetWeather (WeatherRequest) returns (WeatherResponse);
  rpc AddProduct (Product) returns (ProductResponse);
  rpc GetProducts (Empty) returns (ProductList);
  rpc UpdateProduct (ProductUpdate) returns (ProductResponse);
  rpc DeleteProduct (ProductId) returns (ProductResponse);
}

// Messages utilisés par le service
message Task {
  string id = 1;
  string description = 2;
}

message AddTaskResponse {
  string message = 1;
}

message TaskList {
  repeated Task tasks = 1;
}

message Empty {}

message WeatherRequest {
  string city = 1;
}

message WeatherResponse {
  float temperature = 1;
  string description = 2;
  int32 humidity = 3;
}

message Product {
  string name = 1;
  string description = 2;
  double price = 3;
  int32 stock = 4;
}

message ProductUpdate {
  string id = 1;
  string name = 2;
  string description = 3;
  double price = 4;
  int32 stock = 5;
}

message ProductId {
  string id = 1;
}

message ProductResponse {
  string message = 1;
  optional string id = 2;
}

message ProductList {
  repeated Product products = 1;
}


# # Démarrer MongoDB
# docker run --name mongodb -p 27017:27017 -d mongo

# # Démarrer le serveur
# node server.js

# # Dans un autre terminal, démarrer le client météo
# node client.js

# # Arrêter MongoDB
# docker stop mongodb
# docker rm mongodb
